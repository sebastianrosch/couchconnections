// Code generated by MockGen. DO NOT EDIT.
// Source: internal.go

// Package internal is a generated GoMock package.
package internal

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCodeChallengeUtils is a mock of CodeChallengeUtils interface
type MockCodeChallengeUtils struct {
	ctrl     *gomock.Controller
	recorder *MockCodeChallengeUtilsMockRecorder
}

// MockCodeChallengeUtilsMockRecorder is the mock recorder for MockCodeChallengeUtils
type MockCodeChallengeUtilsMockRecorder struct {
	mock *MockCodeChallengeUtils
}

// NewMockCodeChallengeUtils creates a new mock instance
func NewMockCodeChallengeUtils(ctrl *gomock.Controller) *MockCodeChallengeUtils {
	mock := &MockCodeChallengeUtils{ctrl: ctrl}
	mock.recorder = &MockCodeChallengeUtilsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCodeChallengeUtils) EXPECT() *MockCodeChallengeUtilsMockRecorder {
	return m.recorder
}

// RandomBytes mocks base method
func (m *MockCodeChallengeUtils) RandomBytes(length int) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RandomBytes", length)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// RandomBytes indicates an expected call of RandomBytes
func (mr *MockCodeChallengeUtilsMockRecorder) RandomBytes(length interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RandomBytes", reflect.TypeOf((*MockCodeChallengeUtils)(nil).RandomBytes), length)
}

// Encode mocks base method
func (m *MockCodeChallengeUtils) Encode(msg []byte) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encode", msg)
	ret0, _ := ret[0].(string)
	return ret0
}

// Encode indicates an expected call of Encode
func (mr *MockCodeChallengeUtilsMockRecorder) Encode(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encode", reflect.TypeOf((*MockCodeChallengeUtils)(nil).Encode), msg)
}

// Sha256Hash mocks base method
func (m *MockCodeChallengeUtils) Sha256Hash(value string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sha256Hash", value)
	ret0, _ := ret[0].(string)
	return ret0
}

// Sha256Hash indicates an expected call of Sha256Hash
func (mr *MockCodeChallengeUtilsMockRecorder) Sha256Hash(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sha256Hash", reflect.TypeOf((*MockCodeChallengeUtils)(nil).Sha256Hash), value)
}
