// Code generated by MockGen. DO NOT EDIT.
// Source: v1/service.pb.go

// Package v1 is a generated GoMock package.
package v1

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockLivingRoomClient is a mock of LivingRoomClient interface
type MockLivingRoomClient struct {
	ctrl     *gomock.Controller
	recorder *MockLivingRoomClientMockRecorder
}

// MockLivingRoomClientMockRecorder is the mock recorder for MockLivingRoomClient
type MockLivingRoomClientMockRecorder struct {
	mock *MockLivingRoomClient
}

// NewMockLivingRoomClient creates a new mock instance
func NewMockLivingRoomClient(ctrl *gomock.Controller) *MockLivingRoomClient {
	mock := &MockLivingRoomClient{ctrl: ctrl}
	mock.recorder = &MockLivingRoomClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLivingRoomClient) EXPECT() *MockLivingRoomClientMockRecorder {
	return m.recorder
}

// GetVersion mocks base method
func (m *MockLivingRoomClient) GetVersion(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Version, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVersion", varargs...)
	ret0, _ := ret[0].(*Version)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVersion indicates an expected call of GetVersion
func (mr *MockLivingRoomClientMockRecorder) GetVersion(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersion", reflect.TypeOf((*MockLivingRoomClient)(nil).GetVersion), varargs...)
}

// MockLivingRoomServer is a mock of LivingRoomServer interface
type MockLivingRoomServer struct {
	ctrl     *gomock.Controller
	recorder *MockLivingRoomServerMockRecorder
}

// MockLivingRoomServerMockRecorder is the mock recorder for MockLivingRoomServer
type MockLivingRoomServerMockRecorder struct {
	mock *MockLivingRoomServer
}

// NewMockLivingRoomServer creates a new mock instance
func NewMockLivingRoomServer(ctrl *gomock.Controller) *MockLivingRoomServer {
	mock := &MockLivingRoomServer{ctrl: ctrl}
	mock.recorder = &MockLivingRoomServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLivingRoomServer) EXPECT() *MockLivingRoomServerMockRecorder {
	return m.recorder
}

// GetVersion mocks base method
func (m *MockLivingRoomServer) GetVersion(arg0 context.Context, arg1 *empty.Empty) (*Version, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVersion", arg0, arg1)
	ret0, _ := ret[0].(*Version)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVersion indicates an expected call of GetVersion
func (mr *MockLivingRoomServerMockRecorder) GetVersion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersion", reflect.TypeOf((*MockLivingRoomServer)(nil).GetVersion), arg0, arg1)
}
