// Code generated by MockGen. DO NOT EDIT.
// Source: v1/service.pb.go

// Package v1 is a generated GoMock package.
package v1

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockCouchConnectionsClient is a mock of CouchConnectionsClient interface
type MockCouchConnectionsClient struct {
	ctrl     *gomock.Controller
	recorder *MockCouchConnectionsClientMockRecorder
}

// MockCouchConnectionsClientMockRecorder is the mock recorder for MockCouchConnectionsClient
type MockCouchConnectionsClientMockRecorder struct {
	mock *MockCouchConnectionsClient
}

// NewMockCouchConnectionsClient creates a new mock instance
func NewMockCouchConnectionsClient(ctrl *gomock.Controller) *MockCouchConnectionsClient {
	mock := &MockCouchConnectionsClient{ctrl: ctrl}
	mock.recorder = &MockCouchConnectionsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCouchConnectionsClient) EXPECT() *MockCouchConnectionsClientMockRecorder {
	return m.recorder
}

// GetVersion mocks base method
func (m *MockCouchConnectionsClient) GetVersion(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Version, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVersion", varargs...)
	ret0, _ := ret[0].(*Version)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVersion indicates an expected call of GetVersion
func (mr *MockCouchConnectionsClientMockRecorder) GetVersion(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersion", reflect.TypeOf((*MockCouchConnectionsClient)(nil).GetVersion), varargs...)
}

// MockCouchConnectionsServer is a mock of CouchConnectionsServer interface
type MockCouchConnectionsServer struct {
	ctrl     *gomock.Controller
	recorder *MockCouchConnectionsServerMockRecorder
}

// MockCouchConnectionsServerMockRecorder is the mock recorder for MockCouchConnectionsServer
type MockCouchConnectionsServerMockRecorder struct {
	mock *MockCouchConnectionsServer
}

// NewMockCouchConnectionsServer creates a new mock instance
func NewMockCouchConnectionsServer(ctrl *gomock.Controller) *MockCouchConnectionsServer {
	mock := &MockCouchConnectionsServer{ctrl: ctrl}
	mock.recorder = &MockCouchConnectionsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCouchConnectionsServer) EXPECT() *MockCouchConnectionsServerMockRecorder {
	return m.recorder
}

// GetVersion mocks base method
func (m *MockCouchConnectionsServer) GetVersion(arg0 context.Context, arg1 *empty.Empty) (*Version, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVersion", arg0, arg1)
	ret0, _ := ret[0].(*Version)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVersion indicates an expected call of GetVersion
func (mr *MockCouchConnectionsServerMockRecorder) GetVersion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersion", reflect.TypeOf((*MockCouchConnectionsServer)(nil).GetVersion), arg0, arg1)
}
